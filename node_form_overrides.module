<?php

/**
 * @file
 * Contains node_form_overrides.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_help().
 */
function node_form_overrides_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the node_form_overrides module.
    case 'help.page.node_form_overrides':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Overrides node create, update, and delete form titles and button labels') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add third party config options to override node form page titles and
 * button labels on node add/edit forms.
 */
function node_form_overrides_form_node_type_edit_form_alter(&$form, FormStateInterface &$form_state) {
  /** @var \Drupal\node\NodeTypeInterface $type */
  $type = $form_state->getFormObject()->getEntity();

  $form['node_form_overrides'] = array(
    '#type' => 'details',
    '#description' => t('Control the page titles and submit button labels on node edit and delete forms. Leaving any of these fields empty will use the core default values.'),
    '#title' => t('Label Overrides'),
    '#weight' => 1,
    '#group' => 'additional_settings',
    '#tree' => TRUE,
  );
  $form['node_form_overrides']['insert_button'] = array(
    '#title' => t('Create Node Submit Button'),
    '#type' => 'textfield',
    '#default_value' => $type->getThirdPartySetting('node_form_overrides', 'insert_button', 'Save'),
  );
  $form['node_form_overrides']['update_button'] = array(
    '#title' => t('Update Node Submit Button'),
    '#type' => 'textfield',
    '#default_value' => $type->getThirdPartySetting('node_form_overrides', 'update_button', 'Update'),
  );
  $form['node_form_overrides']['insert_title'] = array(
    '#title' => t('Create Node Title'),
    '#type' => 'textfield',
    '#default_value' => $type->getThirdPartySetting('node_form_overrides', 'insert_title', 'Add new [node:content-type:name]'),
    '#description' => t('The page title when creating a new node of this type. This field supports tokens.'),
  );
  $form['node_form_overrides']['update_title'] = array(
    '#title' => t('Update Node Title'),
    '#type' => 'textfield',
    '#default_value' => $type->getThirdPartySetting('node_form_overrides', 'update_title', 'Edit this [node:content-type:name]'),
    '#description' => t('The page title when updating a node of this type. This field supports tokens.'),
  );

  $form['node_form_overrides']['delete_form_title'] = array(
    '#title' => t('Delete Form Title'),
    '#type' => 'textfield',
    '#default_value' => $type->getThirdPartySetting('node_form_overrides', 'delete_form_title', 'Are you sure you want to delete this [node:content-type:name]?'),
    '#description' => t('The page title for the delete node confirmation form. This field supports tokens.'),
  );
  $form['node_form_overrides']['delete_form_description'] = array(
    '#title' => t('Delete Form Description'),
    '#type' => 'textarea',
    '#default_value' => $type->getThirdPartySetting('node_form_overrides', 'delete_form_description', 'This action cannot be undone.'),
    '#description' => t('The description text for the delete node confirmation form. This field supports tokens.'),
  );

  $form['node_form_overrides']['token_tree_link'] = [
    '#theme' => 'token_tree_link',
    '#token_types' => ['node'],
    '#weight' => 10,
  ];

  $form['#entity_builders'][] = 'node_form_overrides_form_node_type_form_builder';
}

/**
 * Entity builder for the node_type_edit form overrides.
 */
function node_form_overrides_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  $settings = $form_state->getValue('node_form_overrides');
  foreach ($settings as $name => $value) {
    $type->setThirdPartySetting('node_form_overrides', $name, $value);
  }
  $type->setThirdPartySetting('node_form_overrides', 'node_labels', $form_state->getValue('node_form_overrides'));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Override default values on the node delete confirm form.
 */
function node_form_overrides_form_node_confirm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($node = $form_state->getFormObject()->getEntity()) {
    $type = $node->type->entity;

    $token_service = \Drupal::service('token');
    $token_args = [
      'node' => $node,
    ];

    if ($title = $type->getThirdPartySetting('node_form_overrides', 'delete_form_title')) {
      $form['#title'] = $token_service->replace($title, $token_args);
    }

    if ($description = $type->getThirdPartySetting('node_form_overrides', 'delete_form_description')) {
      $form['description']['#markup'] = $token_service->replace($description, $token_args);
    }
  }
}

/**
 * Implements hook_form_node_form_alter()
 *
 * Override the button lables and form titles of node forms.
 */
function node_form_overrides_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  $type = $node->type->entity;
  //if ($settings = $type->getThirdPartySetting('node_form_overrides', 'node_labels', [])) {
  $token_service = \Drupal::service('token');
  $token_args = [
    'node' => $node,
  ];
  if ($node->isNew()) {

    if (isset($form['actions']['submit']) && $button_label = $type->getThirdPartySetting('node_form_overrides', 'insert_button')) {
      $form['actions']['submit']['#value'] = t($button_label);
    }

    if ($title = $type->getThirdPartySetting('node_form_overrides', 'insert_title')) {
      $form['#title'] = $token_service->replace($title, $token_args);
    }

  } else {
    if (isset($form['actions']['submit']) && $button_label = $type->getThirdPartySetting('node_form_overrides', 'update_button')) {
      $form['actions']['submit']['#value'] = t($button_label);
    }
    if ($title = $type->getThirdPartySetting('node_form_overrides', 'update_title')) {
      $form['#title'] = $token_service->replace($title, $token_args);
    }
  }
  //}
}
